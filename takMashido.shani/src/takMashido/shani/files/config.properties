#--- DO NOT EDIT THIS FILE. ---
#--- To edit configuration add new files inside locations pointed by configLocation key ---
#
#Most properties set in child config files overwrite values set there (or parent of child config).
#Some properties are 'Additive' which means value from child config's is added to final value instead of replacing it.
#
#For path containing directories use '/' instead '\'
#All strings are stored in ShaniString way, which means there are split on '*' character occurrences.

#Location of another config file/directory
#Directory has to end with '/' character
#Can contain multiple locations separated with '*' character
#If given file/directory do not exist during startup it's automatically created during shani startup
#
#When multiple entries are pointed there are processed in order of occurrence
#Files inside pointed directories are parsed in alphabetical order overwriting previous config.
#Every level of config files is parsed after previous level is fully parsed - in BFS order.
configLocation=config.properties*shaniData/config/

#Language code to use by shani
language=pl

#From which directory load extensions
extensionsDirectory=shaniData/extensions/
#Name of directories containing initFiles within jar file. It's additive property
initFileLocation=shani/init*shani/coreInit

#File containing saved order data
dataFile=shaniData/shaniData.dat

#logs files directory
logsDirectory=shaniData/log/

#Responses meaning yes/no
positiveResponseKey=yup*tak*yes*of course*naturalnie*y
negativeResponseKey=nie*nope*niet*no*nic*n

#Cost of match between two characters which are national similar. e.g a and \u0105 in Polish.
nationalSimilarityCost=8
#Cost of skipping character during matching
characterDeletionCost=50
#Threshold used to determine if characters are swapped
characterSwapThreshold=50
#Cost of swapping characters
characterSwapCost=30
#Cost between two characters being close to each other on qwerty keyword.
qwertyNeighbourCost=30
#Cost of character mismatch
differentCharacterCost=50
#Cost of adding character to compared word
characterInsertionCost=50

#If word compare cost lower then this It's assume words are equal.
wordCompareThreshold=100
#If sentence compare cost lower then this It's assume sentences are equal.
sentenceCompareThreshold=300
#Cost of inserting word into compared sentence
wordInsertionCost=300
#Cost of skipping word during match
wordDeletionCost=300

#Importance bias added to sentence for each word matched by DataReturn Element prioritizing sentences with lesser words in them.
sentenceMatcherWordReturnImportanceBias=-10
sentenceMatcherRegexImportanceBias=5

importanceBiasMultiplier=.5

#Multiplier used to fix short words mismatch. Multiplies final compare cost based on length of word.
#First value for 1 letter words, second for 2 letters, ..., last for any other.  Comma separated.
characterCompareCostMultiplier=10,5,2,1.4f,1

#Use if you want to route Shani network traffic through socks or HTTP proxy.
#socksProxyHost=IP
#socksProxyPort=Port
#HTTPProxyHost=IP
#HTTPProxyPort=Port

#Set true to run shani in testMode. Loads shani, run's all test and exits.
#Normally you do not want to use it. As a developer just give "-c testMode=true" to program args to run test, no need for special config file.
testMode=false
#Which directory in class path contain test manifest files
testManifestLocation=shani/tests*shani/coreTests